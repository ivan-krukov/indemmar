#+STARTUP: showall

* =indemmar= - context managers for `matplotlib` plots

** Example

#+BEGIN_SRC python
with plot(fname='fig/simple.png') as (fig, ax):
    ax.plot([1, 3, 1, 4, 5, 1, 0])
#+END_SRC
[[./simple.png]]

#+BEGIN_SRC python
with plot_and_legend(ncol=2,
                     fname='fig/legend.png',
                     figsize=(10, 4),
                     legend_side='right',
                     legend_ncol=1) as (fig, ax):

    x = np.linspace(0, np.pi * 2, 100)
    ax[0].plot(x, np.sin(x), label="$y=sin(x)$", color='red')
    ax[1].plot(x, np.cos(x), label="$y=cos(x)$", color='blue')
    fig.suptitle('Periodic functions')

#+END_SRC
[[./legend.png]]


** Idea

The module allows a more DRY approach to using the =matplotlib= interface. For
example, instead of:

#+BEGIN_SRC python
fig, ax = plt.subplots()
ax.plot([1, 3, 1, 4, 5, 1, 0])
fig.tight_layout()
fig.savefig('fig/simple.png')
#+END_SRC

We would write:

#+BEGIN_SRC python
with plot(fname='fig/simple.png') as (fig, ax):
    ax.plot([1, 3, 1, 4, 5, 1, 0])
#+END_SRC

Additionally, the module wraps a sane approach to dealing with plot legends by
creating a new subplot for the legend, which means that the legend won't be
cliped or overlap the plot itself:

#+BEGIN_SRC python
with plot_and_legend as (fig, ax):
    ax.plot([1, 3, 1, 4, 5, 1, 0], label='Data')
#+END_SRC

The context manager will pick up the labels used for creating the figure. This
sacrifices the customizability somewhat, since the user doesn't have access to
the legend object. A more explicit approach would be to create a legend subplot
layout with =adaptable_legend_subplot=, and then customize the legend:

#+BEGIN_SRC python
fig, lax, ax = adaptable_legend_subplot(nrow, ncol, legend_side, **figure_kwargs)

h, l = get_all_handles_and_labels(fig)
lax.legend(h, l, bbox_transform=lax.transAxes, bbox_to_anchor=[0.5, 0.5], loc='center')
#+END_SRC

The module is necessarily opinionated, but makes most of its behaviour
customizable.
